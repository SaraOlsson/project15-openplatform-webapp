@model OpenPlatform_WebPortal.Models.HomeView
@{
    ViewData["Title"] = "Project 15 Open Platform";
}

<div class="sidenav">

    <!--------------------------------------------------
    Device Selection
    --------------------------------------------------->
    <fieldset style="height:100%;">
        <legend class="inner"><strong>Device Selection</strong></legend>
        <div>
            <label style="font-weight:500;" for="iotHubDeviceList">Select Device ID</label>
        </div>
        <div style="max-width:inherit;">
            <select id="iotHubDeviceList">
                <option value=""></option>
                @if (ViewBag.IoTHubDeviceList != null)
                {
                    foreach (var item in ViewBag.IoTHubDeviceList.Devices)
                    {
                        <option value="@item.DeviceId" data-isEdge="@item.IsEdge" data-ModelId="@item.ModelId" data-Status="@item.Status">@item.DeviceId</option>
                    }
                }
            </select>
        </div>
    </fieldset>

    <!--------------------------------------------------
    Device Information
    --------------------------------------------------->
    <fieldset style="height:100%;">
        <legend class="inner"><strong>Device Information</strong></legend>
        <table style="width:100%;">
            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="fas fa-info-circle"></i>
                        <span class="tooltiptext">Status of device connection.  Device is either online (Connected) or offline (Disconnected).</span>
                    </div>
                </td>
                <td>
                    <label class="sidenavLabel">Connection State</label>
                </td>
                <td>
                    <div id="deviceConnectionString">
                        &nbsp;
                    </div>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="fas fa-info-circle"></i>
                        <span class="tooltiptext">Status of the device.  Either enabled or disabled.</span>
                    </div>
                </td>
                <td>
                    <label class="sidenavLabel">Device Status</label>
                </td>
                <td>
                    <div id="deviceState">
                        &nbsp;
                    </div>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="fas fa-clipboard"></i>
                        <span class="tooltiptext">Copy device connection string used to connect to IoT Hub.</span>
                    </div>
                </td>
                <td colspan="2">
                    <button type="button" id="btnIoTHubConnectionStringCopy" class="sidenavButton">Copy Connection String</button>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="fas fa-clipboard"></i>
                        <span class="tooltiptext">Copy primary device key used to authenticate device with IoT Hub.</span>
                    </div>
                </td>
                <td colspan="2">
                    <button type="button" id="btnIoTHubPrimaryKeyCopy" class="sidenavButton">Copy Primary Key</button>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="fas fa-clipboard"></i>
                        <span class="tooltiptext">Copy secondary device key used to authenticate device with IoT Hub.</span>
                    </div>
                </td>
                <td colspan="2">
                    <button type="button" id="btnIoTHubSecondaryKeyCopy" class="sidenavButton">Copy Secondary Key</button>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="fas fa-info-circle"></i>
                        <span class="tooltiptext">IoT Plug and Play Digital Twin Model ID.</span>
                    </div>
                </td>
                <td colspan="2">
                    <label class="sidenavLabel">Device Model ID</label>
                </td>
            </tr>
        </table>

        <div id="deviceModelId" style="width:inherit;color:blue;overflow-x:scroll; white-space:nowrap;">
            &nbsp;
        </div>
    </fieldset>

    <!--------------------------------------------------
    Device Operation
    --------------------------------------------------->
    <fieldset style="height:100%;">
        <legend class="inner"><strong>Device Operation</strong></legend>
        <table style="width:100%;">
            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="far fa-file-code"></i>
                        <span class="tooltiptext">Display Device Twin contents.</span>
                    </div>
                </td>
                <td>
                    <button type="button" id="btnShowDeviceTwin" class="sidenavButton">Display Device Twin</button>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="far fa-file-code"></i>
                        <span class="tooltiptext">Send command(s) to a device based on IoT Plug and Play device model.</span>
                    </div>
                </td>
                <td>
                    <button type="button" id="btnShowDeviceCommand" class="sidenavButton">Send commands to device</button>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="far fas fa-plus"></i>
                        <span class="tooltiptext">Add a new device to IoT Hub.</span>
                    </div>
                </td>
                <td>
                    <button type="button" id="btnShowAddIoTHubDevicePopup" class="sidenavButton">Add device</button>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="far fa-trash-alt"></i>
                        <span class="tooltiptext">Delete the selected device from IoT Hub.</span>
                    </div>
                </td>
                <td>
                    <button type="button" id="btnDeleteIoTHubDevice" class="sidenavButton">Delete device</button>
                </td>
            </tr>
        </table>
    </fieldset>

    <!--------------------------------------------------
    Device Provisioning
    --------------------------------------------------->
    <fieldset style="height:100%;">
        <legend class="inner"><strong>Device Provisioning</strong></legend>
        <div>
            <label for="dpsEnrollmentList" id="EnrollmentType" style="font-weight:500;">DPS Enrollment</label>
        </div>
        <div style="max-width:inherit;">
            <select id="dpsEnrollmentList">
                <option value=""></option>
                @if (ViewBag.DpsEnrollmentList != null)
                {
                    foreach (var item in ViewBag.DpsEnrollmentList.Enrollments)
                    {
                        if (ViewBag.DpsEnrollmentList.SelectedEnrollment != null && ViewBag.DpsEnrollmentList.SelectedEnrollment == item.RegistrationId)
                        {
                            <option value="@item.RegistrationId" data-isGroup="@item.isGroup" selected="selected">@item.RegistrationId</option>
                        }
                        else
                        {
                            <option value="@item.RegistrationId" data-isGroup="@item.isGroup">@item.RegistrationId</option>
                        }
                    }
                }
            </select>
        </div>
        <table style="width:100%;">
            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="fas fa-info-circle"></i>
                        <span class="tooltiptext">Status of the enrollment.  Either enabled or disabled.</span>
                    </div>
                </td>
                <td>
                    <label class="sidenavLabel">Status</label>
                </td>
                <td>
                    <div id="enrollmentStatus">
                        &nbsp;
                    </div>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="fas fa-clipboard"></i>
                        <span class="tooltiptext">ID Scope of DPS</span>
                    </div>
                </td>
                <td>
                    <button type="button" id="btnDpsIdScopeCopy" class="sidenavButton">Copy ID Scope</button>
                </td>
                <td>
                    <div>
                        @ViewData["DpsIdScope"]
                    </div>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="fas fa-clipboard"></i>
                        <span class="tooltiptext">Copy primary key used to authenticate device with DPS.</span>
                    </div>
                </td>
                <td colspan="2">
                    <button type="button" id="btnDpsPrimaryKeyCopy" class="sidenavButton">Copy Primary Key</button>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="fas fa-clipboard"></i>
                        <span class="tooltiptext">Copy secondary key used to authenticate device with DPS.</span>
                    </div>
                </td>
                <td colspan="2">
                    <button type="button" id="btnDpsSecondaryKeyCopy" class="sidenavButton">Copy Secondary Key</button>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="far fas fa-plus"></i>
                        <span class="tooltiptext">Add a new enrollment to DPS.</span>
                    </div>
                </td>
                <td>
                    <button type="button" id="btnShowAddDpsEnrollmentPopup" class="sidenavButton">Add enrollment</button>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="fas fa-qrcode"></i>
                        <span class="tooltiptext">Generate QR code for Phone as a Device (PaaD).</span>
                    </div>
                </td>
                <td>
                    <button type="button" id="btnShowQrCodePopup" class="sidenavButton">Generate QR Code</button>
                </td>
            </tr>

            <tr>
                <td class="sidenavFas">
                    <div class="sidenavTooltip">
                        <i class="far fa-trash-alt"></i>
                        <span class="tooltiptext">Delete the selected enrollment from DPS.</span>
                    </div>
                </td>
                <td>
                    <button type="button" id="btnDeleteDpsEnrollment" class="sidenavButton">Delete enrollment</button>
                </td>
            </tr>
        </table>
    </fieldset>

    <!--------------------------------------------------
    Edge Impulse
    --------------------------------------------------->
    <fieldset style="height:100%;">
        <legend class="inner"><strong>Edge Impulse</strong></legend>

    <table style="width:100%;">

        <tr>
            <td class="sidenavFas">
                <div class="sidenavTooltip">
                    <i class="far fas fa-plus"></i>
                    <span class="tooltiptext">Connect a project from Edge Impulse.</span>
                </div>
            </td>
            <td>
                <button type="button" id="btnConnectEIProjectPopup" class="sidenavButton">Connect project</button>
            </td>
        </tr>

        <tr>
            <td class="sidenavFas">
                <div class="sidenavTooltip">
                    <i class="fas fa-clipboard"></i>
                    <span class="tooltiptext">ID of Edge Impulse project</span>
                </div>
            </td>
            <td>
                <button type="button" id="btnEiProjectIdCopy" class="sidenavButton">Project ID</button>
            </td>
            <td>
                <div id="eiProjectIdDiv">
                    @ViewData["EiProjectId"]
                </div>
            </td>
        </tr>

        <tr>
            <td class="sidenavFas">
                <div class="sidenavTooltip">
                    <i class="fas fa-clipboard"></i>
                    <span class="tooltiptext">Name of Edge Impulse project</span>
                </div>
            </td>
            <td>
                <span>Project name</span>
            </td>
            <td>
                <div id="eiProjectIdName"></div>
            </td>
        </tr>


    </table>
    </fieldset>

</div>

<!--------------------------------------------------
Main Page
--------------------------------------------------->
<div class="main">

    <!--------------------------------------------------
    Azure Map
    --------------------------------------------------->
    <fieldset>
        <legend><strong>Azure Maps</strong></legend>
        <div id="locationLegend" style="width:inherit;overflow-x:scroll; white-space:nowrap;display:inline">
            <button type="button" id="btnLocationLegend">&nbsp;</button>
        </div>
        <div id="txtCoordinates" style="width:inherit;overflow-x:scroll; white-space:nowrap;display:inline">
            &nbsp;
        </div>
        <div id="divIndoorMap" style="width:inherit;overflow-x:scroll; white-space:nowrap;display:none">
            <button type="button" id="btnSetIndoorMap"><i class="fas fa-map-marker-alt"></i>Indoor Map</button>
        </div>
        <div style="width:auto;overflow:auto;">
            <div id="map-id" style="width:100%;min-width: 1024px; min-height: 480px; width: inherit; height: 30vh;"></div>
        </div>
    </fieldset>

    <!--------------------------------------------------
    TSI Chart
    --------------------------------------------------->
    <fieldset>
        <legend><strong>Time Series Insights</strong></legend>
        <div>
            @*<button type="button" id="btnLoginTsi"><i class="fas fa-sync"></i>Login</button>*@
            <button type="button" id="btnRefreshTsi"><i class="fas fa-sync"></i>Refresh</button>
            <label>Auto Refresh not enabled.  Please refresh manually.</label>
        </div>
        <div style="min-width: 1024px; width: inherit; margin-bottom:5px;">
            <label style="font-weight:400">Select Telemetry</label>
            <select id="telemetryList" name="telemetryList" style="padding-left:5px;min-width:10em;height:2.0em"></select>
            <input type="text" id="telemetryName" placeholder="Enter name of telemetry" style="padding-left: 5px; min-width: 10em; height: 2.0em;display:none">
            <select id="telemetryDataType" style="padding-left: 5px; min-width: 10em; height: 2.0em;display:none">
                <option>Double</option>
                <option>Long</option>
            </select>
            <label style="font-weight:400">Telemetry Interval (Minutes)</label>
            <input type="text" id="telemetryInterval" placeholder="Enter interval in minutes" style="padding-left: 5px; min-width: 10em; height: 2.0em;display:inline">
        </div>
        <div id="tsiNonPnP" style="display: none; text-align:left; position:relative;top:30%;z-index:1;color:red;">
            <div id="tsiNonPnPMsg">Non IoT Plug and Play Device.</div>
            <div>Please specify telemetry name and data type.  *case sensitive</div>
        </div>
        <div id="tsiChart" style="min-width: 1024px; width: inherit;">
            <div id="tsiLineChart" style="position:relative;width: 100%;height:calc(30vh - 2em); margin: 0px;"></div>
        </div>
    </fieldset>

    <!--------------------------------------------------
    Telemetry and Events.  Updated via SignalR
    --------------------------------------------------->
    <fieldset>
        <legend><strong>Device Telemetry and Events</strong></legend>
        <div class="container">
            <div class="EventSection">
                <button type="button" id="clear-events"><i class="far fa-trash-alt"></i>Clear Events</button>
                <table id="device-events" class="table table-striped" style="max-height: 50vh;overflow: auto">
                    <thead>
                    <th>&nbsp;</th>
                    <th>Event Time(UTC)</th>
                    <th>Device ID</th>
                    <th>Model ID</th>
                    <th>Event Type</th>
                    <th>Event Source</th>
                    </thead>
                    <tbody id="device-event-details"></ tbody >
                </table>
            </div>
        </div>
    </fieldset>

    <!--------------------------------------------------
    Modal Dialog to create a new device
    --------------------------------------------------->
    <div class="modal fade" id="ModalCreateDevice" role="dialog" style="">
        <div class="modal-dialog err-pop">
            <div class="modal-content" id="NewDeviceModal">
                <div class="modal-header">
                    <strong>Add a Device to IoT Hub</strong>
                </div>
                <div class="modal-body">
                    <textares>A case-sensitive string (up to 128 characters long) of alphanumeric characters plus certain special characters.</textares>
                    <br>
                    <textares>- . + % _ # * ? ! ( ) , : = &amp; $ '</textares>
                    <div style="margin-top:1em">
                        @Html.TextBoxFor(m => Model.newDeviceId, new
                        {
                            @class = "form-control input-md",
                            @id = "newDeviceId",
                            placeholder = "Enter new device ID",
                            Required = "required"
                        })
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnAddIoTHubDevice" style="max-width:30%;min-width:120px;padding:3.5px;"><i class="fas fa-plus"></i>Add</button>
                    <button type="button" style="max-width:30%;min-width:120px;padding:3.5px;" data-dismiss="modal"><i class="fas fa-times"></i>Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--------------------------------------------------
    Modal Dialog to create a DPS enrollment
    --------------------------------------------------->
    <div class="modal fade" id="ModalCreateDpsEnrollment" role="dialog">
        <div class="modal-dialog err-pop">
            <div class="modal-content" id="NewDpsEnrollmentModal">
                <div class="modal-header">
                    <strong>Add a new DPS enrollment</strong>
                </div>
                <div class="modal-body">
                    <textares>A case-sensitive string (up to 128 characters long) of alphanumeric characters plus certain special characters.</textares>
                    <br>
                    <textares>- . + % _ # * ? ! ( ) , : = &amp; $ '</textares>
                </div>
                <div class="modal-body" style="font-size:0.8em">
                    <textares>*Currently only Symmetric Key attestation is supported.</textares>
                </div>
                <div class="modal-body">
                    @using (Html.BeginForm("AddDpsEnrollment", "IoTHubDps", FormMethod.Post, new { @id = "NewEnrollmentForm" }))
                    {
                        @Html.TextBoxFor(m => Model.registrationId, new
                        {
                            @class = "form-control input-md",
                            @id = "newRegistrationId",
                            placeholder = "Enter new Registration ID",
                            Required = "required"
                        })

                        @Html.CheckBox("isGroupEnrollment", false, new { @id = "isDpsGroupEnrollment" })
                        <label for="IsGroupEnrollment" style="font-weight:500;">Group Enrollment</label>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnAddDpsEnrollment" style="max-width:30%;min-width:120px;padding:3.5px;"><i class="fas fa-plus"></i>Add</button>
                    <button type="button" style="max-width:30%;min-width:120px;padding:3.5px;" data-dismiss="modal"><i class="fas fa-times"></i>Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--------------------------------------------------
    Modal Dialog to display Device Twin
    --------------------------------------------------->
    <div class="modal fade" id="ModalDeviceTwin" role="dialog">
        <div class="modal-dialog err-pop" style="width:50vw;min-width:640px;">
            <div class="modal-content" id="DeviceTwinModal">
                <div class="modal-header">
                    <strong>Device Twin</strong>
                </div>
                <div class="modal-body">
                    <pre><code id="DeviceTwinContent" style="font-size:1.5rem"></code></pre>
                </div>
                <div class="modal-footer">
                    <button type="button" style="max-width:30%;min-width:120px;padding:3.5px;" data-dismiss="modal"><i class="fas fa-times"></i>Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--------------------------------------------------
    Modal Dialog to display Device Command
    --------------------------------------------------->
    <div class="modal fade" id="ModalSendCommand" role="dialog">
        <div class="modal-dialog err-pop" style="width:50vw;min-width:640px;">
            <div class="modal-content">
                <div class="modal-header">
                    <strong>Send Command</strong>
                </div>
                <div class="modal-body" id="commandModal">
                </div>
                <div class="modal-footer">
                    <button type="button" id="DivClose" style="width:45%;padding:3.5px;" data-dismiss="modal"><i class="fas fa-times"></i>Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!--------------------------------------------------
    Modal Dialog to display QR Code for PaaD
    --------------------------------------------------->
    <div class="modal fade" id="ModalGenrateQrCode" role="dialog">
        <div class="modal-dialog err-pop" style="width:50vw;min-width:640px;">
            <div class="modal-content">
                <div class="modal-header">
                    <strong>QR Code to connect your phone</strong>
                </div>
                <div class="modal-body" id="qrCode">
                    <div style="font-size: 1.1em;padding-bottom:0.5em">
                        <strong>Turn your smartphone into an IoT device</strong>
                        <div style="font-size:0.9em">
                            Get App Now!
                        </div>
                        <div>
                            <table style="text-align: center;">
                                @*<tr>
                                        <th>iOS App</th>
                                        <th>Android App</th>
                                    </tr>*@
                                <tr>
                                    <td><a href="https://apps.apple.com/app/iot-plug-and-play/id1563783687" target="_blank"><img src="/images/applestore.png" alt="Apple Store" style="height:2em"></a></td>
                                    <td><a href="https://play.google.com/store/apps/details?id=com.iot_pnp" target="_blank"><img src="/images/GooglePlay.png" alt="Google Play" style="height: 2em"></a></td>
                                </tr>
                                <tr>
                                    <td><img src="/images/AppStoreQR.png" alt="Apple Store" style="height:8em"></td>
                                    <td><img src="/images/GooglePlayQR.png" alt="Google Play" style="height:8em"></td>
                                </tr>
                            </table>


                        </div>
                        <div style="font-size:0.9em">
                            <a href="https://docs.microsoft.com/azure/iot-fundamentals/iot-phone-app-how-to">Learn more about Phone as a Device</a>
                        </div>
                    </div>

                    <fieldset style="height:100%;margin:0;padding-bottom:5px">


                        @using (Html.BeginForm("GetQrCode", "IoTHubDps", FormMethod.Post, new { @id = "QRCodeForm" }))
                        {
                            <div style="max-width:inherit;">

                                <label for="dpsGroupEnrollmentList" style="font-weight:500;"><strong>Group Enrollment Name</strong></label>
                                <div style="max-width:inherit;">
                                    Select DPS Group Enrollment to use.<br />If you do not have one, leave this empty.  This will create a new group enrollment called "SAS-IoT-Devices"
                                </div>
                                <div style="max-width:inherit;">
                                    <select id="dpsGroupEnrollmentList">
                                        <option value=""></option>
                                        @if (ViewBag.DpsGroupEnrollmentList != null)
                                        {
                                            foreach (var item in ViewBag.DpsGroupEnrollmentList.Enrollments)
                                            {
                                                <option value="@item.RegistrationId">@item.RegistrationId</option>
                                            }
                                        }
                                    </select>
                                </div>

                                @* @Html.DropDownListFor(model => Model.registrationId, new SelectList(Model.groupEnrollmentList, "Value", "Text"), new { @id = "groupEnrollmentList" })*@
                                <label for="groupId" style="font-weight:500;"><strong>Device ID</strong></label>

                                @Html.TextBoxFor(m => Model.newDeviceId, new
                                   {
                                       @class = "form-control input-md",
                                       @id = "qrCodeDeviceId",
                                       placeholder = "Enter new Device ID",
                                       Required = "required",
                                   })
                            </div>
                            @*<div>
                                    <label for="groupEnrollmentList" style="font-weight:500;"><strong>Group Enrollment Name</strong></label>
                                </div>

                                <div id="qrCodeDeviceId">
                                    &nbsp;
                                </div>*@

                        }
                    </fieldset>
                    <img id="qrCodeImage" src="" style="max-width:200px" />
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnGenerateQrCode" style="max-width:30%;min-width:120px;padding:3.5px;"><i class="fas fa-plus"></i>Generate QR Code</button>
                    <button type="button" id="DivClose" style="max-width:30%;min-width:120px;padding:3.5px;" data-dismiss="modal"><i class="fas fa-times"></i>Close</button>
                </div>

            </div>
        </div>
    </div>

    <!--------------------------------------------------
    Modal Dialog to connect to Edge Impulse
    --------------------------------------------------->
    <div class="modal fade" id="ModalConnectEdgeImpulse" role="dialog" style="">
        <div class="modal-dialog err-pop">
            <div class="modal-content" id="NewDeviceModal">
                <div class="modal-header">
                    <strong>Connect Edge Impulse project</strong>
                </div>
                <div class="modal-body">
                    <textares>X characters project id.</textares>
                    <div style="margin-top:1em">
                        @Html.TextBoxFor(m => Model.eiProjectId, new
                        {
                            @class = "form-control input-md",
                            @id = "eiProjectId",
                            placeholder = "Enter Edge Impulse ID",
                            Required = "required"
                        })
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnConnectEIProject" style="max-width:30%;min-width:120px;padding:3.5px;"><i class="fas fa-plus"></i>Connect</button>
                    <button type="button" style="max-width:30%;min-width:120px;padding:3.5px;" data-dismiss="modal"><i class="fas fa-times"></i>Cancel</button>
                </div>
            </div>
        </div>
    </div>

</div>

<!--------------------------------------------------
Script block to update Telemetry/Events grid
--------------------------------------------------->
<script id="event-template" type="text/x-handlebars-template">
    <tr data-toggle="collapse" data-target="#event-{{eventId}}" class="accordian-toggle">
        <td>
            <button class="btn btn-primary btn-xs">
                <i class="fas fa-angle-double-down"></i>
            </button>
        </td>
        <td>{{eventTime}}</td>
        <td>{{eventDeviceId}}</td>
        <td>{{eventModelId}}</td>
        <td>{{eventSource}}</td>
        <td>{{eventType}}</td>
    </tr>
    <tr class="hiddenRow collapse" id="event-{{eventId}}">
        <td colspan="12">
            <div class="accordian-body">
                <pre><code class="nohighlight">{{eventData}}</code></pre>
            </div>
        </td>
    </tr>
</script>

@section scripts
{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0/handlebars.js"></script>
    <script type="text/javascript">

        var hubConnection;
        var deviceConnectionString = "";
        var deviceKeyPrimary = "";
        var deviceKeySecondary = "";
        var deviceTwinString = "";
        var enrollmentKeyPrimary = "";
        var enrollmentKeySecondary = "";

        var tsiToken = "";
        var tsiClient
        var lineChart = null;

        var adalJs = document.createElement('script');
        adalJs.src = "https://secure.aadcdn.microsoftonline-p.com/lib/1.0.17/js/adal.min.js";
        document.getElementsByTagName('head')[0].appendChild(adalJs);
        var map;
        var statesetId = '@ViewData["statesetId"]';
        var tilesetId = '@ViewData["tilesetId"]';
        var hasLocation = false;
        var locationDataName = "";
        var mapDatasource;
        var userShape;
        var userPosition;

        //
        // Initialization on page load
        //
        var initialize = function () {

            // Initialize Edge Impulse
            var eiApiKeyTest = getEiApiKey();
            console.log(eiApiKeyTest);

            // Initialize Authentication for TSI
            getTsiToken();

            tsiClient = new TsiClient();

            // Initialize Azure Map
            map = new atlas.Map('map-id', {
                center: [37.9062, 0.0236],
                zoom: 19,
                language: 'en-US',
                showLogo: false,
                renderWorldCopies: false,
                view: 'Auto',
                showBuildingModels: true,
                showFeedbackLink: false,
                style: "satellite_road_labels",
                authOptions: {
                    authType: 'subscriptionKey',
                    subscriptionKey: `@ViewData["mapKey"]`
                }
            });

            map.events.add('ready', function () {

                map.controls.add([
                    new atlas.control.ZoomControl(),
                    new atlas.control.CompassControl(),
                    new atlas.control.PitchControl(),
                    new atlas.control.StyleControl()
                ],
                    {
                        position: "top-left"
                    }
                )

                mapDatasource = new atlas.source.DataSource();

                if (statesetId.length > 0 && tilesetId.length > 0) {

                    console.log("Stateset ID %s", statesetId);
                    console.log("Tileset ID %s", tilesetId);

                    indoorManager = new atlas.indoor.IndoorManager(map, {
                        levelControl: new atlas.control.LevelControl({ position: 'top-left' }),
                        tilesetId: tilesetId,
                        statesetId: statesetId // Optional
                    });

                    indoorManager.setDynamicStyling(true);

                    map.events.add("levelchanged", indoorManager, (eventData) => {
                        //put code that runs after a level has been changed
                        console.log("The level has changed:", eventData);
                    });
                    map.events.add("facilitychanged", indoorManager, (eventData) => {
                        //put code that runs after a facility has been changed
                        console.log("The facility has changed:", eventData);
                    });
                }

                document.getElementById('divIndoorMap').style.display = 'inline';


            })

            var clearEvents = document.getElementById('clear-events');
                clearEvents.addEventListener('click', function () {
                    clearEventData();
            });

            // SignalR
            hubConnection = new signalR.HubConnectionBuilder()
                .withUrl("telemetryhub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            hubConnection.start().catch(err => console.error(err.toString()));

            hubConnection.on('SignalRTest', function (payload) {
                alert("SignalR Test : " + JSON.stringify(payload));
            });

            hubConnection.on('DeviceTelemetry', function (payload) {
                var jsonData = JSON.parse(payload);
                var telemetryJson = JSON.parse(jsonData.data);

                if (hasLocation) {
                    console.log(telemetryJson);
                    if (locationDataName in telemetryJson) {
                        var lng
                        var lat
                        var txtCoordinates

                        if (telemetryJson[locationDataName].type == "point") {
                            //console.log("Test LNG " + telemetryJson[locationDataName].coordinates[0]);
                            //console.log("Test LAT " + telemetryJson[locationDataName].coordinates[1]);

                            lng = parseFloat(telemetryJson[locationDataName].coordinates[0]);
                            lat = parseFloat(telemetryJson[locationDataName].coordinates[1]);
                            txtCoordinates = telemetryJson[locationDataName].coordinates[1] + "," + telemetryJson[locationDataName].coordinates[0];

                        }
                        else
                        {
                            lng = parseFloat(telemetryJson[locationDataName].lon);
                            lat = parseFloat(telemetryJson[locationDataName].lat);
                            txtCoordinates = telemetryJson[locationDataName].lat + "," + telemetryJson[locationDataName].lon;
                        }

                        if (document.getElementById('txtCoordinates').innerHTML != txtCoordinates) {

                            map.markers.clear();
                            marker = new atlas.HtmlMarker({
                                htmlContent: '<div class="pulseIcon"></div>',
                                position: [lng, lat]
                            });

                            map.markers.add(marker);

                            var txtCoordinatesDiv = document.getElementById('txtCoordinates');
                            var btnLocation = document.getElementById('btnLocationLegend');

                            //console.log("DeviceTelemetry Location : " + txtCoordinatesDiv.innerHTML);

                            if (txtCoordinatesDiv.innerHTML == "&nbsp;") {
                                map.setCamera({
                                    center: [lng, lat],
                                    zoom: 13
                                });
                            }

                            btnLocation.disabled = (txtCoordinates == "&nbsp;");
                            txtCoordinatesDiv.innerHTML = txtCoordinates;
                        }
                    }
                }
                addEvent(jsonData.eventId, jsonData.eventType, jsonData.deviceId, jsonData.dtDataSchema, jsonData.eventSource, jsonData.eventTime, jsonData.data);
            });

            hubConnection.on('DeviceTwinChange', function (payload) {
                var jsonData = JSON.parse(payload)
                addEvent(jsonData.eventId, jsonData.eventType, jsonData.deviceId, jsonData.dtDataSchema, jsonData.eventSource, jsonData.eventTime, jsonData.data);
            });

            hubConnection.on('DigitalTwinChange', function (payload) {
                var jsonData = JSON.parse(payload)
                addEvent(jsonData.eventId, jsonData.eventType, jsonData.deviceId, jsonData.dtDataSchema, jsonData.eventSource, jsonData.eventTime, jsonData.data);
            });

            hubConnection.on('DeviceLifecycle', function (payload) {
                var jsonData = JSON.parse(payload)
                addEvent(jsonData.eventId, jsonData.eventType, jsonData.deviceId, jsonData.dtDataSchema, jsonData.eventSource, jsonData.eventTime, jsonData.data);
                console.log("DeviceLifecycle " + jsonData.eventSource);
            });

            hubConnection.on('EventGrid', function (payload) {
                var jsonData = JSON.parse(payload)
                addEvent(jsonData.eventId, jsonData.eventType, jsonData.deviceId, jsonData.dtDataSchema, jsonData.eventSource, jsonData.eventTime, jsonData.data);
                //console.log("Event Grid " + jsonData.eventSource);
                if (jsonData.eventSource == 'Microsoft.Devices.DeviceCreated') {
                    console.log("Device Created");
                    var selectedDevice = $('#iotHubDeviceList option:selected').text();
                    RefreshIoTHubDevices(500, selectedDevice);
                }
                else if (jsonData.eventSource == 'Microsoft.Devices.DeviceDeleted') {
                    var selectedDevice = $('#iotHubDeviceList option:selected').text();
                    RefreshIoTHubDevices(500);
                    RefreshIoTHubDevices(500, selectedDevice);
                }
                else if ((jsonData.eventSource == 'Microsoft.Devices.DeviceConnected') || (jsonData.eventSource == 'Microsoft.Devices.DeviceDisconnected')) {
                    var targetDeviceId = $('#iotHubDeviceList option:selected').text();
                    if (targetDeviceId == jsonData.deviceId) {
                        getDeviceInfo(jsonData.deviceId);
                    }
                }
            });

            enableDisableDeviceButtons(true);
            enableDisableEnrollmentButtons(true);
        };

        //
        // On Navbar
        //
        //
        // Device Information sidenav
        //
        $('#btnIoTHubConnectionStringCopy').click(function () {
            console.log("IoTHub Connection String : " + deviceKeyPrimary);
            navigator.clipboard.writeText(deviceConnectionString);
        })

        $('#btnIoTHubPrimaryKeyCopy').click(function () {
            console.log("IoTHub Primary Key : " + deviceKeyPrimary);
            navigator.clipboard.writeText(deviceKeyPrimary);
        })

        $('#btnIoTHubSecondaryKeyCopy').click(function () {
            console.log("IoT Hub Secondary Key : " + deviceKeySecondary);
            navigator.clipboard.writeText(deviceKeySecondary);
        })

        //
        // Device Information sidenav
        //
        // Retrieve and display Device Twin
        $('#btnShowDeviceTwin').click(function () {
            var targetDeviceId = $('#iotHubDeviceList option:selected').text();

            if (targetDeviceId.length > 0) {
                console.log("Getting Device Twin for : " + deviceConnectionString);

                $.ajax({
                type: "GET",
                    url: '@Url.Action("GetDeviceTwin", "IoTHubDps")',
                    data: { deviceId: targetDeviceId},
                    success: function (response) {
                        document.getElementById('DeviceTwinContent').innerHTML = response;
                        $('#ModalDeviceTwin').modal('show');
                    },
                    error: function (jqXHR) {
                        alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                    }
                });
            };
        })

        //
        // Retrieves Device Command and display a dialog
        // To Do : Cleanup
        $('#btnShowDeviceCommand').click(function () {
            var deviceModelId = $('#deviceModelId').text();
            console.log("Get Command for : " + deviceModelId);
            var commandJson = getDeviceCommand(deviceModelId)
            console.log("Get Command Response : " + JSON.stringify(commandJson));
            //var commands = JSON.json(commandJson);

            //for (var i = 0; i < Object.keys(commands).length; i++) {
            //    console.log(commands[i].CommanName);
            //}
        })

        // Display a dialog to add a new device to IoT Hub
        $('#btnShowAddIoTHubDevicePopup').click(function () {
            $('#ModalCreateDevice').modal('show');
        })

        $('#ModalCreateDevice').on('shown.bs.modal', function (e) {
            $('#newDeviceId').focus();
        });

        // Display a dialog to connect Edge Impulse project
        // ModalConnectEdgeImpulse
        $('#btnConnectEIProjectPopup').click(function () {
            $('#ModalConnectEdgeImpulse').modal('show');
        })

        //
        // Adds a new IoT Device to IoT Hub
        //
        $('#btnAddIoTHubDevice').click(function () {
            var deviceId = $('#newDeviceId').val();

            if (deviceId.length > 0) {
                disableDeviceList(true);
                console.log("Adding a new IoT Hub device " + deviceId);
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("AddIoTHubDevice", "IoTHubDps")',
                    data: { deviceId: deviceId },
                    success: function (response) {
                        $("#iotHubDeviceList").empty();
                        $("#iotHubDeviceList").append(response);
                    },
                    error: function (jqXHR) {
                        alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                    }
                });
                disableDeviceList(false);
                $('#ModalCreateDevice').modal('hide');
            }
        });

        // Deletes an IoT device from IoT Hub
        $('#btnDeleteIoTHubDevice').click(function () {

            var deviceId = $('#iotHubDeviceList option:selected').text();

            if (deviceId.length > 0) {

                console.log("Deleting device from IoT Hub : " + deviceId);
                disableDeviceList(true);

                $.ajax({
                    type: "DELETE",
                    url: '@Url.Action("DeleteIoTHubDevice", "IoTHubDps")',
                    data: { deviceId: deviceId },
                    success: function (response) {
                        RefreshIoTHubDevices(500);
                        clearDeviceInfo();
                    },
                    error: function (jqXHR) {
                        alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                    }
                });
                disableDeviceList(false);
            }
        });

        //
        // Device Provisioning sidenav
        //
        $('#btnDpsIdScopeCopy').click(function () {
            console.log("Dps ID Scope : " + enrollmentKeyPrimary);
            navigator.clipboard.writeText(`@ViewData["DpsIdScope"]`);
        })

        $('#btnDpsPrimaryKeyCopy').click(function () {
            console.log("Dps Primary Key : " + enrollmentKeyPrimary);
            navigator.clipboard.writeText(enrollmentKeyPrimary);
        })

        $('#btnDpsSecondaryKeyCopy').click(function () {
            console.log("Dps Secondary Key : " + enrollmentKeySeconary);
            navigator.clipboard.writeText(enrollmentKeySeconary);
        })

        // Add a new enrollment
        $('#btnShowAddDpsEnrollmentPopup').click(function () {
            $('#isDpsGroupEnrollment').prop("checked", false);
            $('#newRegistrationId').val("");
            $('#ModalCreateDpsEnrollment').modal('show');
        })

        // Display QR Code
        $('#btnShowQrCodePopup').click(function () {
            $('#btnGenerateQrCode').attr("disabled", false);
            $('#qrCodeDeviceId').val("");
            $('#qrCodeImage').attr("src", "");
            $('#ModalGenrateQrCode').modal('show');
        })

        $('#ModalCreateDpsEnrollment').on('shown.bs.modal', function (e) {
            $('#newRegistrationId').focus();
        });

        // Delete enrollment
        $('#btnDeleteDpsEnrollment').click(function () {
            var registrationId = $('#dpsEnrollmentList option:selected').text();
            var isGroup = $('#dpsEnrollmentList option:selected').data('isgroup');

            if (registrationId.length > 0) {
                console.log("Deleting enrollment : " + registrationId);

                $.ajax({
                    type: "DELETE",
                    url: '@Url.Action("DeleteDpsEnrollment", "IoTHubDps")',
                    data: { registrationId: registrationId, isGroup: isGroup },
                    success: function (response) {
                        $("#dpsEnrollmentList").empty();
                        $("#dpsEnrollmentList").append(response);
                        enableDisableEnrollmentButtons(true);
                        clearEnrollmentInfo();
                    },
                    error: function (jqXHR) {
                        alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                    }
                });
            }
        })

        $('#btnLocationLegend').click(function () {
            console.log("btnLocationLegend click");
            var coordinates = document.getElementById('txtCoordinates').innerHTML
            if (coordinates != '&nbsp;') {
                var lat = parseFloat(coordinates.split(",")[0]);
                var lng = parseFloat(coordinates.split(",")[1]);

                map.setCamera({
                    center: [lng, lat]
                });
            } else {
                //console.log("No Location");
            }
        });

        $('#btnSetIndoorMap').click(function () {
            map.setCamera({
                center: [-122.139192, 47.647472],
                zoom: 19
            });
        });

        //
        // Adds a new individual enrollment to DPS
        //
        $('#btnAddDpsEnrollment').click(function () {
            var newRegId = $('#newRegistrationId').val();
            var isGroup = document.getElementById('isDpsGroupEnrollment').checked

            if (newRegId.length > 0) {
                console.log("Adding DPS Enrollment " + newRegId + " Group " + isGroup);
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("AddDpsEnrollment", "IoTHubDps")',
                    data: { newRegistrationId: newRegId, isGroup : isGroup},
                    success: function (response) {
                        $("#dpsEnrollmentList").empty();
                        $("#dpsEnrollmentList").append(response);
                        getDpsEnrollmentInfo(newRegId);
                        enableDisableEnrollmentButtons(false);
                    },
                    error: function (jqXHR) {
                        alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                    }
                });
                $('#ModalCreateDpsEnrollment').modal('hide');
            };
        });

        $('#btnGenerateQrCode').click(function () {
            console.log("Generating QR code");
            var deviceId = $('#qrCodeDeviceId').val();
            var registrationId = $('#groupEnrollmentList option:selected').text();

            if (deviceId.length > 0) {
                console.log("Enrollment " + registrationId + " Device Id " + deviceId);
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GenerateQrCode", "IoTHubDps")',
                    data: { deviceId: deviceId, registrationId: registrationId },
                    success: function (response) {
                        $('#qrCodeImage').attr("src", response.imageData);
                        //document.getElementById('qrCodeDeviceId').innerHTML = response.deviceId;
                        $('#btnGenerateQrCode').attr("disabled", true);

                        // We may have created a new group enrollment so refresh DPS Enrollment list
                        RefreshDpsEnrollments();
                        RefreshDpsGroupEnrollments();

                    },
                    error: function (jqXHR) {
                        alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                    }
                });
            };
        });

        // Edge Impulse UI

        $('#btnEiProjectIdCopy').click(function () {
            console.log("Edge Impulse ProjectId : " + ViewData["EiProjectId"]);
            navigator.clipboard.writeText(`@ViewData["EiProjectId"]`);
        })

        //
        // Connects EI project
        //
        $('#btnConnectEIProject').click(function () {
            var projectId = $('#eiProjectId').val();

            if (projectId.length > 0) {

                console.log("Connect Edge Impulse project " + projectId);
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ConnectEIProject", "EdgeImpulse")',
                    data: { apiKey: projectId },
                    success: function (response) {

                        console.log("Connect Edge Impulse project " + projectId + " SUCCESS");
                        console.log(response);

                        var json = JSON.parse(response);

                        console.log(json);
                        console.log("Found Edge Impulse project " + json.projects[0].id);

                        document.getElementById('eiProjectIdDiv').innerHTML = json.projects[0].id;
                        document.getElementById('eiProjectIdName').innerHTML = json.projects[0].name;

                    },
                    error: function (jqXHR) {
                        alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                    }
                });
                disableDeviceList(false);
                $('#ModalConnectEdgeImpulse').modal('hide');
            }
        });


        // Refresh TSI Chart
        $('#btnLoginTsi').click(function () {
            var authContextProperties =  { postLogoutRedirectUri: 'https://insights.timeseries.azure.com', clientId: '120d688d-1518-4cf7-bd38-182f158850b6', cacheLocation: 'localStorage' };

            authContext = new AuthenticationContext({
                authContextProperties,
                cacheLocation: 'localStorage',
                clientId: '120d688d-1518-4cf7-bd38-182f158850b6'
            });
            authContext.login();
        })

        // Refresh TSI Chart
        $('#btnRefreshTsi').click(function () {
            var targetDeviceId = $('#iotHubDeviceList option:selected').text();
            runTsqPnP(targetDeviceId)
        })

        //
        // User selected a device
        //
        $('#iotHubDeviceList').change(function () {
            var targetDeviceId = $('#iotHubDeviceList option:selected').text();
            if (targetDeviceId.length > 0) {
                console.log("device selected " + targetDeviceId);
                getDeviceInfo(targetDeviceId);
            } else {
                enableDisableDeviceButtons(true);
                clearDeviceInfo();
                UpdateLocationInfo("", "&nbsp;", "&nbsp;");
            }
        });

        var SelectDeviceList = function (deviceId) {
            var deviceList = document.getElementById('iotHubDeviceList');
            for (var i = 0; i < deviceList.options.length; i++) {
                if (deviceList.options[i].value == deviceId) {
                    console.log("Found " + deviceId);
                    deviceList.options[i].selected = true;
                    return;
                }
            }
        }

        var RefreshIoTHubDevices = function (delay, selectedDevice) {
            console.log("Updating device list");
            //var selectedDevice = $('#iotHubDeviceList option:selected').text();
            $.ajax({
                type: "GET",
                url: '@Url.Action("RefreshIoTHubDevices", "IoTHubDps")',
                data: { delay: delay, selectedDevice:selectedDevice},
                success: function (response) {
                    //debugger
                    console.log("New Device List");
                    $("#iotHubDeviceList").empty();
                    $("#iotHubDeviceList").append(response);
                },
                error: function (jqXHR) {
                    alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                }
            });
        }

        var RefreshDpsEnrollments = function () {
            console.log("Refreshing Dps Erollment");
            $.ajax({
                type: "GET",
                url: '@Url.Action("RefreshDpsEnrollments", "IoTHubDps")',
                data: {},
                success: function (response) {
                    //debugger
                    console.log("Enrollment List");
                    $("#dpsEnrollmentList").empty();
                    $("#dpsEnrollmentList").append(response);
                },
                error: function (jqXHR) {
                    alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                }
            });
        }

        var RefreshDpsGroupEnrollments = function () {
            console.log("Refreshing Dps Erollment");
            $.ajax({
                type: "GET",
                url: '@Url.Action("RefreshDpsGroupEnrollments", "IoTHubDps")',
                data: {},
                success: function (response) {
                    //debugger
                    console.log("Enrollment List");
                    $("#dpsGroupEnrollmentList").empty();
                    $("#dpsGroupEnrollmentList").append(response);
                },
                error: function (jqXHR) {
                    alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                }
            });
        }

        var UpdateLocationInfo = function (dataName, displayName, coordinates) {
            var btnLocation = document.getElementById('btnLocationLegend');
            locationDataName = dataName;
            btnLocation.innerHTML = displayName;
            document.getElementById('txtCoordinates').innerHTML = coordinates;
            if (dataName.length == 0) {
                btnLocation.disabled = true;
                btnLocation.style.display = 'none';
                map.markers.clear();
            } else {
                btnLocation.style.display = 'inline';
                var buttonText = '<i class="fas fa-map-marker-alt"></i>' + displayName;
                btnLocation.innerHTML = buttonText;
            }
        }

        //
        // User selected an enrollment
        //
        $('#dpsEnrollmentList').change(function () {
            var registrationid = $('#dpsEnrollmentList option:selected').text();
            var isGroup = $('#dpsEnrollmentList option:selected').data('isgroup') == "True";
            console.log("Enrollment " + registrationid + " isGroup " + isGroup);
            if (registrationid.length > 0) {
                getDpsEnrollmentInfo(registrationid);
                enableDisableEnrollmentButtons(false);
            }
        });

        //
        // User selected telemetry
        //
        $('#telemetryList').change(function () {
            var targetDeviceId = $('#iotHubDeviceList option:selected').text();
            console.log("telemetryList change " + targetDeviceId);
            runTsqPnP(targetDeviceId)
        });

        //
        // Gets device information.  Connection String, Model ID, Primary/Secondary Keys, and connect/disconnect status
        //
        var getDeviceInfo = function (deviceId) {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetIoTHubDevice", "IoTHubDps")',
                data: { deviceId: deviceId },
                success: function (response) {
                    UpdateLocationInfo("", "&nbsp;", "&nbsp;");
                    hasLocation = false;

                    document.getElementById('deviceConnectionString').innerHTML = response.connectionState;
                    if (response.connectionState == "Disconnected") {
                        document.getElementById('deviceConnectionString').style.color = 'Red';
                    }
                    else {
                        document.getElementById('deviceConnectionString').style.color = 'Blue';
                    }
                    document.getElementById('deviceState').innerHTML = response.status;
                    if (response.connectionState == "Disabled") {
                        document.getElementById('deviceState').style.color = 'Red';
                    }
                    else {
                        document.getElementById('deviceState').style.color = 'Blue';
                    }
                    deviceKeyPrimary = response.primaryKey;
                    deviceKeySecondary = response.secondaryKey;
                    deviceConnectionString = "HostName=" + '@ViewData["IoTHubName"]' + ";DeviceId=" + response.deviceId + ";SharedAccessKey=" + response.primaryKey;
                    document.getElementById('deviceModelId').innerHTML = response.deviceModelId;

                    if (response.deviceModelId) {
                        document.getElementById('telemetryList').style.display = 'inline';
                        document.getElementById('telemetryName').style.display = 'none';
                        document.getElementById('telemetryDataType').style.display = 'none';
                    } else {
                        document.getElementById('telemetryList').style.display = 'none';
                        document.getElementById('telemetryName').style.display = 'inline';
                        document.getElementById('telemetryDataType').style.display = 'inline';
                    }

                    deviceTwinString = response;
//                    console.log(response);

                    var json = JSON.stringify(response);
                    json = JSON.parse(json);

                    var select = document.getElementById("telemetryList");
                    select.innerText = "";
                    var options = [];

                    for (var i = 0; i < Object.keys(json.telemetry).length; i++) {
                        console.log("Telemetry : " + JSON.stringify(json.telemetry[i]));

                        var telemetryType = json.telemetry[i].telemetryType;
                        if (telemetryType != null && (telemetryType.includes("geospatial") || telemetryType.includes("dtmi:iotcentral:class:Location"))) {
                            UpdateLocationInfo(json.telemetry[i].telemetryName, json.telemetry[i].telemetryDisplayName, "&nbsp;");
                            hasLocation = true;
                        }
                        else {
                            var option = document.createElement('option');
                            if (json.telemetry[i].unit) {
                                option.text = json.telemetry[i].telemetryDisplayName + " (" + json.telemetry[i].unit + ")  ";
                            } else {
                                option.text = json.telemetry[i].telemetryDisplayName;
                            }
                            option.value = json.telemetry[i].telemetryName + ";" + json.telemetry[i].dataType;
                            options.push(option.outerHTML);
                        }
                    }

                    select.insertAdjacentHTML('beforeEnd', options.join('\n'));
                    enableDisableDeviceButtons(false);
                    runTsqPnP(deviceId);
                    return true;
                },
                error: function (jqXHR) {
                    alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                    return false;
                }
            });
        }

        //
        // Get enrollment info
        //
        var getDpsEnrollmentInfo = function (registrationId) {

            getDpsEnrollment(registrationId);
            enableDisableEnrollmentButtons(false);
        }

        //
        // Gets enrollment information.  Status and keys
        //
        var getDpsEnrollment = function (registrationId) {

            let enrollment = $('#dpsEnrollmentList option:selected');
            var isGroup = enrollment.data('isgroup') == "True";

            $.ajax({
                type: "GET",
                url: '@Url.Action("GetDpsEnrollment", "IoTHubDps")',
                data: { registrationId: registrationId , isGroup : isGroup},
                success: function (response) {
                    console.log(response)
                    document.getElementById("enrollmentStatus").innerHTML = response.status;
                    enrollmentKeyPrimary = response.primaryKey;
                    enrollmentKeySeconary = response.secondaryKey;
                    if (isGroup) {
                        document.getElementById('EnrollmentType').innerHTML = "Group Enrollment"
                    }
                    else {
                        document.getElementById('EnrollmentType').innerHTML = "Individual Enrollment"
                    }

                    return true;
                },
                error: function (jqXHR) {
                    alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                    return false;
                }
            });
        }


        //
        // Enable/disable devlice selection list
        //
        var disableDeviceList = function (disableList) {
            document.getElementById("iotHubDeviceList").disabled = disableList;
        }

        //
        // Enable/disable buttons based on device selection
        //
        var enableDisableDeviceButtons = function (disableButton) {

            document.getElementById("btnDeleteIoTHubDevice").disabled = disableButton;

            if (disableButton == false && deviceConnectionString.length > 0) {
                document.getElementById("btnIoTHubConnectionStringCopy").disabled = disableButton;
                document.getElementById("btnIoTHubPrimaryKeyCopy").disabled = disableButton;
                document.getElementById("btnIoTHubSecondaryKeyCopy").disabled = disableButton;
                document.getElementById("btnShowDeviceCommand").disabled = disableButton;
            } else {
                document.getElementById("btnIoTHubConnectionStringCopy").disabled = disableButton;
                document.getElementById("btnIoTHubPrimaryKeyCopy").disabled = disableButton;
                document.getElementById("btnIoTHubSecondaryKeyCopy").disabled = disableButton;
                document.getElementById("btnShowDeviceCommand").disabled = disableButton;
            }
            document.getElementById("btnShowDeviceTwin").disabled = disableButton;
        }

        //
        // Clears UI components when a device is de-selected
        //
        var clearDeviceInfo = function () {
            document.getElementById('deviceConnectionString').innerHTML = "&nbsp;"
            document.getElementById('deviceState').innerHTML = "&nbsp;"
            document.getElementById('deviceModelId').innerHTML = "&nbsp;"
            deviceKeyPrimary = ""
            deviceKeySecondary = ""
            deviceConnectionString = "";
            var telemetrySelection = document.getElementById("telemetryList");

            while (telemetrySelection.options.length > 0) {
                telemetrySelection.remove(0);
            }
        }

        //
        // Enable/disable buttons based on enrollment selection
        //
        var enableDisableEnrollmentButtons = function (disableButton) {
            document.getElementById("btnDeleteDpsEnrollment").disabled = disableButton;
            document.getElementById("btnDpsIdScopeCopy").disabled = disableButton;
            document.getElementById("btnDpsPrimaryKeyCopy").disabled = disableButton;
            document.getElementById("btnDpsSecondaryKeyCopy").disabled = disableButton;
        }

        //
        // Clears UI components when a device is de-selected
        //
        var clearEnrollmentInfo = function () {
            document.getElementById('enrollmentStatus').innerHTML = "&nbsp;"
        }

        //
        // Clears device events (messages and events)
        //
        var clearEventData = function () {
            $('#device-events').find("tr:gt(0)").remove();
            $('#device-events').hide();
        }

        //
        // Adds device events to the table
        //
        var addEvent = function (id, type, deviceId, deviceModelId, source, time, data) {
            var dataObj = JSON.parse(data);
            var context = {
                eventTime: time,
                eventDeviceId: deviceId,
                eventModelId: deviceModelId,
                eventType: type,
                eventSource: source,
                eventId: id,
                eventData: JSON.stringify(dataObj, undefined, 2)
            };
            var source = document.getElementById('event-template').innerHTML;
            var template = Handlebars.compile(source);
            var html = template(context);

            $('#device-events').show();
            $('#device-event-details').prepend(html);
        }

        //
        // Functions for TSI
        //

        //
        // Gets a token for TSI access
        //
        var getTsiToken = function () {
            //console.log("Getting TSI Token");
            document.getElementById('tsiNonPnP').style.display = 'none';
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetTsiToken", "Tsi")',
                success: function (response) {
                    tsiToken = response.toString();
                    //console.log("GetTsiToken : " + tsiToken);
                    if (tsiToken.length == 0) {
                        document.getElementById('tsiChart').style.display = "none";
                    } else {
                        document.getElementById('tsiChart').style.display = "block";
                    }
                },

                error: function (jqXHR) {
                    alert("GetTsiToken Error: " + jqXHR.status + " " + jqXHR.responseText);
                    tsiToken = "";
                    document.getElementById('tsiChart').style.display = "none";
                }
            });
        }

        var runTsqPnP = function (deviceId) {

            // console.log("Running TSQ for " + deviceId);

            // make sure this is IoT Plug and Play device
            var deviceModelId = $('#deviceModelId').text();
            var telemetryText = "";
            var telemetryValue = "";
            var telemetryName = "";
            var telemetryUnit = "";

            if (deviceModelId.startsWith("dtmi:") == false) {
                if (document.getElementById('telemetryName').value.length > 0 && document.getElementById('telemetryDataType').value.length > 0) {
                    document.getElementById('tsiNonPnP').style.display = "none";
                    document.getElementById('tsiLineChart').style.display = "block";
                    telemetryText = document.getElementById('telemetryName').value;
                    telemetryName = document.getElementById('telemetryName').value;
                    telemetryUnit = $('#telemetryDataType option:selected').text();
//                    telemetryUnit = document.getElementById('telemetryDataType').value;
                }
                else
                {
                    document.getElementById('tsiNonPnP').style.display = "block";
                    document.getElementById('tsiLineChart').style.display = "none";
                    return;
                }
            }
            else {
                document.getElementById('tsiNonPnP').style.display = "none";
                document.getElementById('tsiLineChart').style.display = "block";
                telemetryText = $('#telemetryList option:selected').text();
                telemetryValue = $('#telemetryList option:selected').val();
                if (telemetryValue) {
                    telemetryName = telemetryValue.split(";")[0]
                    telemetryUnit = telemetryValue.split(";")[1]
                }
            }

            linechart = null;
            // create aggregate expressions, they are S1/S2 SKU query objects
            var linechartTsqExpressions = [];

            if (telemetryValue == null) {
                return;
            }

            var dataName = '$event.' + telemetryName + '.' + telemetryUnit
            var interval = document.getElementById('telemetryInterval').value;
            //console.log("runTsqPnP data name : " + dataName);

            if (interval) {
                console.log("Interval : " + document.getElementById('telemetryInterval').value);
            }
            else {
                interval = 10;
            }
            var endDate = new Date();
            var startDate = new Date(endDate.valueOf() - 1000 * 60 * interval);

            //https://github.com/microsoft/tsiclient/blob/b19d9f0078c8ed3104b9d664f05551664a5ae602/docs/UX.md#chart-options

            linechartTsqExpressions.push(new tsiClient.ux.TsqExpression(
                { timeSeriesId: [deviceId] }, // instance json
                {
                    Telemetry_Data: {
                        kind: 'numeric',
                        value: { tsx: dataName },
                        filter: null,
                        aggregation: { tsx: 'avg($value)' }
                    }
                },
                { from: startDate, to: endDate, bucketSize: '10S' }, // search span
                { color: 'Red', alias: telemetryText, includeDots: true, includeEnvelope: true }
            ));

            getTsiToken();

            if (tsiToken.length > 0) {

                tsiClient.server.getTsqResults(tsiToken, `@ViewData["tsiUri"]`, linechartTsqExpressions.map(function (ae) { return ae.toTsq() })).then(function (result) {

                    var transformedResult = tsiClient.ux.transformTsqResultsForVisualization(result, linechartTsqExpressions);

                    //Create the line chart.
                    if (lineChart == null) {
                        lineChart = new tsiClient.ux.LineChart(document.getElementById('tsiLineChart'));
                    }

                    lineChart.render(transformedResult, {
                        dataType: 'numeric', theme: 'dark', grid: true, tooltip: true, legend: 'compact', offset: 'Local',
                    }, linechartTsqExpressions);
                });
            }
        };

        //
        // Sends request to server to retrieve the list of commands based on device model
        //
        var getDeviceCommand = function (modelid) {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCommand", "IoTHubDps")',
                data: { modelid: modelid },
                success: function (response) {
                    var json = JSON.stringify(response);
                    console.log("Get Command : " + json);
                    console.log("Get Length : " + response.length);
                    var commandModal = document.getElementById('commandModal');

                    console.log("Command Modal " + commandModal);

                    while (commandModal.firstChild) {
                        commandModal.removeChild(commandModal.firstChild);
                    }

                    for (var i = 0; i < response.length; i++) {
                        console.log("Command : " + response[i].commandName);

                        var fieldSet = document.createElement("fieldset");
                        var legend = document.createElement("legend");
                        var divDesc = document.createElement("div");
                        var divCmd = document.createElement("div");
                        var divParam = document.createElement("div");

                        if (response[i].commandDisplayName == null) {
                            legend.innerHTML = response[i].commandName;
                        } else {
                            legend.innerHTML = response[i].commandDisplayName;
                        }

                        fieldSet.appendChild(legend);

                        divDesc.innerHTML = response[i].commandDescription;
                        fieldSet.appendChild(divDesc);

                        divCmd.setAttribute('id', i + '-command');
                        divCmd.setAttribute('value', response[i].commandName.toString());
                        divCmd.innerHTML = 'Command Name : ' + response[i].commandName;
                        fieldSet.appendChild(divCmd);

                        divParam.innerHTML = "Command Parameters";

                        fieldSet.appendChild(divParam);

                        var fieldParam = document.createElement("fieldset");
                        fieldParam.setAttribute('style', 'margin:0 0 5px 0');
                        fieldParam.id = 'cmdField-' + i;

                        if (response[i].request != null) {
                            var paramTable = document.createElement('table');
                            paramTable.style.width = '100%';
                            paramTable.setAttribute('border', '0');
                            paramTable.setAttribute('style', 'cellpadding:0; cellspacing:0');
                            paramTable.id = 'cmdTable-' + i;
                            fieldParam.appendChild(paramTable);

                            for (var j = 0; j < response[i].request.length; j++) {
                                var tr = paramTable.insertRow();
                                var td = tr.insertCell();
                                td.setAttribute('style', 'white-space : nowrap; width : 1px');

                                var divLabel = document.createElement("div");
                                divLabel.id = i + '-' + j + '-param';
                                divLabel.setAttribute('value', response[i].request[j].requestName.toString());
                                divLabel.innerHTML = response[i].request[j].requestName + ' (' + response[i].request[j].requestKind + ')';
                                td.appendChild(divLabel);

                                //td.appendChild(document.createTextNode(response[i].request[j].requestName + ' (' + response[i].request[j].requestKind + ')'));

                                td = tr.insertCell();
                                td.setAttribute('style', 'white-space : nowrap; width : 100%');
                                var divValue = document.createElement("div");
                                divValue.setAttribute('style', 'padding:3px;margin-right: 3px');
                                var valueId = i + '-' + j + '-value';

                                if (response[i].request[j].requestKind == "Enum") {
                                    var valueList = document.createElement("select");
                                    valueList.name = valueId;
                                    valueList.setAttribute('style', 'width : 100% ; margin-left:0.5em; height:1.7em');

                                    var enumOptions = [];

                                    valueList.id = valueId;

                                    for (var k = 0; k < response[i].request[j].enumValues.length; k++) {
                                        var enumOption = document.createElement('option');
                                        enumOption.value = response[i].request[j].enumValues[k].toString();
                                        enumOption.text = response[i].request[j].enumValues[k].toString();
                                        enumOptions.push(enumOption.outerHTML);
                                    }
                                    valueList.insertAdjacentHTML('beforeEnd', enumOptions.join('\n'));
                                    divValue.appendChild(valueList);
                                }
                                else if (response[i].request[j].requestKind == "Boolean")
                                {
                                    var valueList = document.createElement("select");
                                    valueList.name = valueId;
                                    valueList.setAttribute('style', 'width : 100% ; margin-left:0.5em; height:1.7em');
                                    valueList.id = valueId;

                                    let newOption = new Option('True', true);
                                    valueList.add(newOption, undefined);
                                    newOption = new Option('False', false);
                                    valueList.add(newOption, undefined);

                                    divValue.appendChild(valueList);

                                }
                                else
                                {
                                    var valueInput = document.createElement("input");
                                    valueInput.setAttribute('style', 'width : 100% ; margin-left:0.5em');
                                    valueInput.id = valueId;
                                    divValue.appendChild(valueInput);
                                }
                                td.appendChild(divValue);
                            }
                        }

                        fieldSet.appendChild(fieldParam);

                        var button = document.createElement('input');
                        button.setAttribute('id', i + '-btn');
                        button.setAttribute('type', 'button');
                        button.setAttribute('value', 'Run Command');
                        button.setAttribute('onclick', 'RunCommand("' + i + '")');
                        fieldSet.appendChild(button);

                        commandModal.appendChild(fieldSet);
                    }

                    $('#ModalSendCommand').modal('show');

                    return true;
                },
                error: function (jqXHR) {
                    alert(" Status: " + jqXHR.status + " " + jqXHR.responseText);
                    return false;
                }
            });
        }

        //
        // Send command
        //
        var sendCommand = function (deviceid, command, payload) {

            $.ajax({
                type: "POST",
                url: '@Url.Action("SendCommand", "IoTHubDps")',
                data: { deviceid: deviceid, command: command, payload: payload },
                success: function (response) {
                    alert(" Status: " + response.status + " " + response.message);
                },
                error: function (response) {
                    alert(" Status: " + response.status + " " + response.message);
                    return false;
                }
            });
        }

        //
        // An event handler for buttons dynamically created for commands
        //
        function RunCommand(id) {

            var cmd = document.getElementById(id + '-command').getAttribute("value");
            var targetDeviceId = $('#iotHubDeviceList option:selected').text();

            console.log("RunCommand ID " + id);
            var cmdTable = document.getElementById("cmdTable-" + id);
            console.log("cmdTable " + cmdTable.rows.length + " rows");

            var payload = "";

            for (i = 0; i < cmdTable.rows.length; i++) {
                var paramDiv = document.getElementById(id + '-' + i + '-param');
                var inputValue = document.getElementById(id + '-' + i + '-value').value;
                console.log("Child Node Name " + paramDiv.getAttribute("value"));

                if (i > 0) {
                    payload = payload + ',';
                }
                payload = payload + `"${paramDiv.getAttribute("value")}":"${inputValue}"`;
            }

            var payloads = `{${payload}}`;
            console.log("Payloads " + payloads);
            sendCommand(targetDeviceId, cmd, payloads);
        }

        $(document).ready(function () {
            $('NewEnrollmentForm').keypress(function (e) {
                if ((e.keyCode == 10) || (e.keyCode == 13)) {
                    e.preventDefault();
                }
            });

            $('NewDeviceForm').keypress(function (e) {
                if ((e.keyCode == 10) || (e.keyCode == 13)) {
                    e.preventDefault();
                }
            });
        });

        //
        // Functions for Edge Impulse
        //

        //
        // Gets a token for TSI access
        //
        var getEiApiKey = function () {
            //console.log("Getting TSI Token");
            document.getElementById('tsiNonPnP').style.display = 'none';
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetEdgeImpulseProject", "EdgeImpulse")',
                success: function (response) {
                    eiProject = response.toString();
                    console.log("GetEdgeImpulseProject : " + eiProject);
                    //if (tsiToken.length == 0) {
                    //    document.getElementById('tsiChart').style.display = "none";
                    //} else {
                    //    document.getElementById('tsiChart').style.display = "block";
                    //}
                },

                error: function (jqXHR) {
                    alert("GetEdgeImpulseProject Error: " + jqXHR.status + " " + jqXHR.responseText);
                    //tsiToken = "";
                    //document.getElementById('tsiChart').style.display = "none";
                }
            });
        }

    </script>
}
